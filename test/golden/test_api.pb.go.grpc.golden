// Code generated by protoc-gen-go. DO NOT EDIT.
// source: test_api.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Request - request message for TestAPI service.
type Request struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_77683351be7bc655, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

// Response - response message for TestAPI service.
type Response struct {
	Uid                  string   `protobuf:"bytes,1,opt,name=uid,proto3" json:"uid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_77683351be7bc655, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "qrpc.test.api.Request")
	proto.RegisterType((*Response)(nil), "qrpc.test.api.Response")
}

func init() { proto.RegisterFile("test_api.proto", fileDescriptor_77683351be7bc655) }

var fileDescriptor_77683351be7bc655 = []byte{
	// 260 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8e, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x80, 0xe9, 0x06, 0x4e, 0x23, 0x1b, 0x12, 0x61, 0x4a, 0xe7, 0x41, 0xeb, 0xc5, 0x53, 0x02,
	0x7a, 0x16, 0x59, 0x41, 0x41, 0x44, 0x90, 0xe2, 0xc9, 0x8b, 0xa4, 0xe9, 0xb3, 0x0d, 0x6e, 0x7d,
	0x59, 0xf2, 0xca, 0xf0, 0x1f, 0xf8, 0x2b, 0xfc, 0xad, 0x92, 0x6e, 0x1e, 0xc6, 0x1c, 0xbd, 0x85,
	0xf7, 0x5e, 0xbe, 0xef, 0x63, 0x23, 0x02, 0x4f, 0xef, 0xca, 0x1a, 0x61, 0x1d, 0x12, 0xf2, 0xe1,
	0xc2, 0x59, 0x2d, 0xc2, 0x50, 0x28, 0x6b, 0xe2, 0x49, 0x89, 0x58, 0xce, 0x40, 0xb6, 0xcb, 0xbc,
	0xf9, 0x90, 0x30, 0xb7, 0xf4, 0xb5, 0xba, 0x4d, 0x26, 0x6c, 0x90, 0xc1, 0xa2, 0x01, 0x4f, 0xfc,
	0x88, 0xf5, 0x1b, 0x53, 0x9c, 0x46, 0xe7, 0xd1, 0xd5, 0x41, 0x16, 0x9e, 0xc9, 0x19, 0xdb, 0xcf,
	0xc0, 0x5b, 0xac, 0x3d, 0x6c, 0x6f, 0xaf, 0x7f, 0x7a, 0x6c, 0xf0, 0x0a, 0x9e, 0xa6, 0x2f, 0x8f,
	0xfc, 0x8e, 0x0d, 0x1f, 0xd0, 0x2d, 0x95, 0x2b, 0x9e, 0x81, 0x2a, 0x2c, 0xf8, 0x58, 0x6c, 0x44,
	0x88, 0xb5, 0x24, 0x1e, 0x8b, 0x55, 0x8d, 0xf8, 0xab, 0x11, 0xf7, 0xa1, 0x86, 0x4f, 0xd9, 0x28,
	0x55, 0xfa, 0x73, 0x83, 0xf0, 0xef, 0x65, 0x7c, 0xb2, 0x45, 0x5e, 0x17, 0x3e, 0xb1, 0xe3, 0xd4,
	0x14, 0xc6, 0x81, 0x26, 0x83, 0xb5, 0x9a, 0x75, 0x94, 0xec, 0xe2, 0x24, 0xfd, 0xef, 0x5e, 0xc4,
	0x6f, 0xd9, 0x61, 0xab, 0xeb, 0x88, 0xd9, 0x35, 0x0f, 0x8c, 0xf4, 0xf2, 0xed, 0xa2, 0x34, 0x54,
	0x35, 0xb9, 0xd0, 0x38, 0x97, 0x5a, 0xf9, 0x6a, 0xa9, 0x4a, 0xac, 0x65, 0xf0, 0xca, 0xe0, 0x95,
	0x36, 0xcf, 0xf7, 0xda, 0x9f, 0x37, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x00, 0xb1, 0x99, 0x12,
	0xc5, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// TestAPIClient is the client API for TestAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
//
// Deprecated: Do not use.
type TestAPIClient interface {
	// ForwardMethod tests forward method.
	ForwardMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error)
	// BackwardMethod tests backward method.
	BackwardMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error)
	// BidirectionalMethod tests bidirectional method.
	//
	// Deprecated: Do not use.
	BidirectionalMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// EmptyMethod tests empty method.
	EmptyMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
}

type testAPIClient struct {
	cc grpc.ClientConnInterface
}

// Deprecated: Do not use.
func NewTestAPIClient(cc grpc.ClientConnInterface) TestAPIClient {
	return &testAPIClient{cc}
}

func (c *testAPIClient) ForwardMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/qrpc.test.api.TestAPI/ForwardMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) BackwardMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qrpc.test.api.TestAPI/BackwardMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Deprecated: Do not use.
func (c *testAPIClient) BidirectionalMethod(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/qrpc.test.api.TestAPI/BidirectionalMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testAPIClient) EmptyMethod(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/qrpc.test.api.TestAPI/EmptyMethod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestAPIServer is the server API for TestAPI service.
//
// Deprecated: Do not use.
type TestAPIServer interface {
	// ForwardMethod tests forward method.
	ForwardMethod(context.Context, *Request) (*empty.Empty, error)
	// BackwardMethod tests backward method.
	BackwardMethod(context.Context, *empty.Empty) (*Response, error)
	// BidirectionalMethod tests bidirectional method.
	//
	// Deprecated: Do not use.
	BidirectionalMethod(context.Context, *Request) (*Response, error)
	// EmptyMethod tests empty method.
	EmptyMethod(context.Context, *empty.Empty) (*empty.Empty, error)
}

// Deprecated: Do not use.
// UnimplementedTestAPIServer can be embedded to have forward compatible implementations.
type UnimplementedTestAPIServer struct {
}

func (*UnimplementedTestAPIServer) ForwardMethod(ctx context.Context, req *Request) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForwardMethod not implemented")
}
func (*UnimplementedTestAPIServer) BackwardMethod(ctx context.Context, req *empty.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BackwardMethod not implemented")
}
func (*UnimplementedTestAPIServer) BidirectionalMethod(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BidirectionalMethod not implemented")
}
func (*UnimplementedTestAPIServer) EmptyMethod(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmptyMethod not implemented")
}

// Deprecated: Do not use.
func RegisterTestAPIServer(s *grpc.Server, srv TestAPIServer) {
	s.RegisterService(&_TestAPI_serviceDesc, srv)
}

func _TestAPI_ForwardMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).ForwardMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrpc.test.api.TestAPI/ForwardMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).ForwardMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_BackwardMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).BackwardMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrpc.test.api.TestAPI/BackwardMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).BackwardMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_BidirectionalMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).BidirectionalMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrpc.test.api.TestAPI/BidirectionalMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).BidirectionalMethod(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _TestAPI_EmptyMethod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestAPIServer).EmptyMethod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/qrpc.test.api.TestAPI/EmptyMethod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestAPIServer).EmptyMethod(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _TestAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "qrpc.test.api.TestAPI",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForwardMethod",
			Handler:    _TestAPI_ForwardMethod_Handler,
		},
		{
			MethodName: "BackwardMethod",
			Handler:    _TestAPI_BackwardMethod_Handler,
		},
		{
			MethodName: "BidirectionalMethod",
			Handler:    _TestAPI_BidirectionalMethod_Handler,
		},
		{
			MethodName: "EmptyMethod",
			Handler:    _TestAPI_EmptyMethod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test_api.proto",
}
