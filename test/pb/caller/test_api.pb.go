// Code generated by protoc-gen-qrpcgo. DO NOT EDIT.
// source: test_api.proto

package caller

import (
	"context"

	"github.com/cashwagon/qrpc/pkg/qrpc"
	"github.com/golang/protobuf/proto"
	"github.com/google/uuid"
	empty "github.com/golang/protobuf/ptypes/empty"
	_pb "github.com/cashwagon/qrpc/test/pb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the qrpc package it is being compiled against.
const _ = qrpc.SupportPackageIsVersion1

// TestAPIClient is the client API for TestAPI service.
type TestAPIClient interface {
	UnaryMethod(ctx context.Context, in *_pb.UnaryMethodRequest) (string, error)
	BinaryMethod(ctx context.Context, in *_pb.BinaryMethodRequest) (string, error)
}

type testAPIClient struct {
	cc *qrpc.ClientConn
}

func NewTestAPIClient(cc *qrpc.ClientConn) TestAPIClient {
	cc.SetService("qrpc.test.api.TestAPI.in")
	return &testAPIClient{cc}
}

func (c *testAPIClient) UnaryMethod(ctx context.Context, in *_pb.UnaryMethodRequest) (string, error) {
	data, err := proto.Marshal(in)
	if err != nil {
		return "", err
	}

	msg := qrpc.Message{
		Method:    "UnaryMethod",
		RequestID: uuid.New().String(),
		Data:      data,
	}

	return msg.RequestID, c.cc.Invoke(ctx, msg)
}

func (c *testAPIClient) BinaryMethod(ctx context.Context, in *_pb.BinaryMethodRequest) (string, error) {
	data, err := proto.Marshal(in)
	if err != nil {
		return "", err
	}

	msg := qrpc.Message{
		Method:    "BinaryMethod",
		RequestID: uuid.New().String(),
		Data:      data,
	}

	return msg.RequestID, c.cc.Invoke(ctx, msg)
}

// TestAPIServer is the server API for TestAPI service.
type TestAPIServer interface {
	BinaryMethod(ctx context.Context, reqID string, out *_pb.BinaryMethodResponse) error
}

func RegisterTestAPIServer(s *qrpc.Server, srv TestAPIServer) {
	s.RegisterService(&_TestAPI_serviceDesc, srv)
}

func _TestAPI_BinaryMethod_Handler(srv interface{}, ctx context.Context, reqID string, msg []byte) error {
	out := new(_pb.BinaryMethodResponse)

	if err := proto.Unmarshal(msg, out); err != nil {
		return err
	}

	return srv.(TestAPIServer).BinaryMethod(ctx, reqID, out)
}

var _TestAPI_serviceDesc = qrpc.ServiceDesc{
	ServiceName: "qrpc.test.api.TestAPI.out",
	HandlerType: (*TestAPIServer)(nil),
	Methods: []qrpc.MethodDesc{
		{
			MethodName: "BinaryMethod",
			Handler: _TestAPI_BinaryMethod_Handler,
		},
	},
}

// Test2APIClient is the client API for Test2API service.
type Test2APIClient interface {
	EmptyMethod(ctx context.Context, in *empty.Empty) (string, error)
}

type test2APIClient struct {
	cc *qrpc.ClientConn
}

func NewTest2APIClient(cc *qrpc.ClientConn) Test2APIClient {
	cc.SetService("qrpc.test.api.Test2API.in")
	return &test2APIClient{cc}
}

func (c *test2APIClient) EmptyMethod(ctx context.Context, in *empty.Empty) (string, error) {
	data, err := proto.Marshal(in)
	if err != nil {
		return "", err
	}

	msg := qrpc.Message{
		Method:    "EmptyMethod",
		RequestID: uuid.New().String(),
		Data:      data,
	}

	return msg.RequestID, c.cc.Invoke(ctx, msg)
}
