package generator

const callerTemplate = `
{{- "" -}}
// Code generated by protoc-gen-qrpcgo. DO NOT EDIT.
// source: {{ .SourceFile }}

package caller

import (
	"context"

	"github.com/cashwagon/qrpc/pkg/qrpc"
	"github.com/golang/protobuf/proto"
	"github.com/google/uuid"

	{{- range .Imports }}
	{{ .Alias }} "{{ .Package }}"
	{{- end }}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the qrpc package it is being compiled against.
const _ = qrpc.SupportPackageIsVersion{{ .GeneratedCodeVersion }}

{{- range .Services }}
{{- $service := .Name -}}
{{- $clientInt := ($service | sprintf "%sClient") -}}
{{- $clientType := ($service | unexport | sprintf "%sClient") -}}
{{- $serverInt := ($service | sprintf "%sServer") }}

// {{ $clientInt }} is the client API for {{ $service }} service.
type {{ $clientInt }} interface {
	{{- range .Methods }}
	{{ .Name }}(ctx context.Context, in *{{ .InType }}) (string, error)
	{{- end }}
}

type {{ $clientType }} struct {
	cc *qrpc.ClientConn
}

func New{{ $clientInt }}(cc *qrpc.ClientConn) {{ $clientInt }} {
	cc.SetService("qrpc.test.api.{{ $service }}.in")
	return &{{ $clientType }}{cc}
}

{{- range .Methods }}

func (c *{{ $clientType }}) {{ .Name }}(ctx context.Context, in *{{ .InType }}) (string, error) {
	data, err := proto.Marshal(in)
	if err != nil {
		return "", err
	}

	msg := qrpc.Message{
		Method:    "{{ .Name }}",
		RequestID: uuid.New().String(),
		Data:      data,
	}

	return msg.RequestID, c.cc.Invoke(ctx, msg)
}
{{- end }}

{{- if (.Methods | isAnyBinaryMethods) }}

// {{ $serverInt }} is the server API for {{ $service }} service.
type {{ $serverInt }} interface {
	{{- range (.Methods | filterBinaryMethods) }}
	{{ .Name }}(ctx context.Context, reqID string, out *{{ .OutType }}) error
	{{- end }}
}

func Register{{ $serverInt }}(s *qrpc.Server, srv {{ $serverInt }}) {
	s.RegisterService(&_{{ $service }}_serviceDesc, srv)
}

{{- range (.Methods | filterBinaryMethods) }}

func _{{ $service }}_{{ .Name }}_Handler(srv interface{}, ctx context.Context, reqID string, msg []byte) error {
	out := new({{ .OutType }})

	if err := proto.Unmarshal(msg, out); err != nil {
		return err
	}

	return srv.({{ $serverInt }}).{{ .Name }}(ctx, reqID, out)
}
{{- end }}

var _{{ $service }}_serviceDesc = qrpc.ServiceDesc{
	ServiceName: "qrpc.test.api.{{ $service }}.out",
	HandlerType: (*{{ $serverInt }})(nil),
	Methods: []qrpc.MethodDesc{
		{{- range (.Methods | filterBinaryMethods) }}
		{
			MethodName: "{{ .Name }}",
			Handler: _{{ $service }}_{{ .Name }}_Handler,
		},
		{{- end }}
	},
}
{{- end }}
{{- end }}
`
