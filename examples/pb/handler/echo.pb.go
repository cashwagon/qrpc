// Code generated by protoc-gen-qrpcgo. DO NOT EDIT.
// source: echo.proto

package handler

import (
	"context"

	"github.com/cashwagon/qrpc/pkg/qrpc"
	"github.com/golang/protobuf/proto"
	_pb "github.com/cashwagon/qrpc/examples/pb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the qrpc package it is being compiled against.
const _ = qrpc.SupportPackageIsVersion1

// EchoAPIClient is the client API for EchoAPI service.
type EchoAPIClient interface {
	Echo(ctx context.Context, reqID string, out *_pb.EchoResponse) error
}

type echoAPIClient struct {
	cc *qrpc.ClientConn
}

func NewEchoAPIClient(cc *qrpc.ClientConn) EchoAPIClient {
	cc.SetService("qrpc.test.api.EchoAPI.out")
	return &echoAPIClient{cc}
}

func (c *echoAPIClient) Echo(ctx context.Context, reqID string, out *_pb.EchoResponse) error {
	data, err := proto.Marshal(out)
	if err != nil {
		return err
	}

	return c.cc.Invoke(ctx, qrpc.Message{
		Method:    "Echo",
		RequestID: reqID,
		Data:      data,
	})
}

// EchoAPIServer is the server API for EchoAPI service.
type EchoAPIServer interface {
	Echo(ctx context.Context, reqID string, in *_pb.EchoRequest) error
}

func RegisterEchoAPIServer(s *qrpc.Server, srv EchoAPIServer) {
	s.RegisterService(&_EchoAPI_serviceDesc, srv)
}

func _EchoAPI_Echo_Handler(srv interface{}, ctx context.Context, reqID string, msg []byte) error {
	in := new(_pb.EchoRequest)

	if err := proto.Unmarshal(msg, in); err != nil {
		return err
	}

	return srv.(EchoAPIServer).Echo(ctx, reqID, in)
}

var _EchoAPI_serviceDesc = qrpc.ServiceDesc{
	ServiceName: "qrpc.test.api.EchoAPI.in",
	HandlerType: (*EchoAPIServer)(nil),
	Methods: []qrpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler: _EchoAPI_Echo_Handler,
		},
	},
}
